mongoDB with Go

Cory LaNou, InfluxDB
cory@influxdb.com
@corylanou

* What is mongoDB

MongoDB (from "humongous") is an open-source document database, and the leading NoSQL database. Written in C++.

.link http://www.mongodb.org/ mongoDB

* What is NoSQL

Trivia bonus question: What does "NoSQL" stands for?

* NoSQL

It does NOT mean "no sql"

It means "Not only SQL"

* Setting up mongoDB

Since installing mongoDB goes beyond the scope of this presentation,
we will use mongolab.

.link https://mongolab.com/ mongolab home page

.link https://mongolab.com/signup/ 1) Sign up

.link https://mongolab.com/create 2) Create instance

3) Select "Single-Node", then "Sandbox".  This is the free option.

4) Give it the database name "beginning_go".

5) Click "Create New Mongo Deployment"

* mongolab instance url and password

To find the url and password, click the name of the newly created instance.

In this case "beginning_go"

* Add a user

.link https://mongolab.com/databases/beginning_go#users Add user

username: go
password: I will tell you this at presentation time

* Connecting

If you have the mongo tools installed locally, you can connect to your instance like this:

	mongo <url>/beginning_go -u <dbuser> -p <dbpassword>

This is not necessary for this workshop

* mgo

mgo (pronounced as mango) is a mongoDB driver for the Go language that implements a rich and well tested selection of features under a very simple API following standard Go idioms.

To get the library locally, run this command at the command line:

	go get gopkg.in/mgo.v2

.link http://godoc.org/gopkg.in/mgo.v2 API Documentation

* spew

This is a go library we will use to "pretty print" from our examples.

	go get github.com/davecgh/go-spew/spew

.link https://github.com/davecgh/go-spew API Documentation

* Setting up our environment

We will need some environment variables to make our life easier.

*Mac/Linux*

	export mongo_url=<your url>
	export mongo_user=go
	export mongo_password=<your password>
	export mongo_collection=to_dos

Test this by running:

	printenv | grep mongo

*Windows*

	set mongo_url=<your url>
	set mongo_user=go
	set mongo_password=<your password>
	set mongo_collection=to_dos

* Environment Variables - Advice

I create a local _dev.env_ file that I source and add it to my _.gitignore_ file so it doesn't check in.

This allows me to quickly open the project, run _source dev.env_ and have all necessary environment variables
for my local project set up.

Summary:

1) Create dev.env file.
2) Add necessary environment variables
3) Add "dev.env" to your ".gitignore" file if using git
4) run:

	source dev.env

* Creating a session - Part 1

Define the package and imports we will use:

.code 01_session/main.go /START IMPORT OMIT/,/END IMPORT OMIT/

* Creating a session - Part 2

Open the "main" block

.code 01_session/main.go /START MAIN OMIT/,/END MAIN OMIT/

* Creating a session - Part 3

Get our environment variables

.code 01_session/main.go /START ENV OMIT/,/END ENV OMIT/

* Creating a session - Part 4

Dial up the server

.code 01_session/main.go /START DIAL OMIT/,/END DIAL OMIT/

* Creating a session - Part 5

Get our collection

.play 01_session/main.go /START FINAL OMIT/,/END FINAL OMIT/


* Creating a session - Part 6

To run this:

	go run main.go

You should get something like this returned:

	Collection: &{Database:0xc20801ed40 Name:to_dos FullName:beginning_go.to_dos}

Here is the entire file:

.link https://gitlab.com/corylanou/beginning-go-meetups/blob/master/mongo/01_session/main.go main.go

* Structs and Annotations - Imports

.code 02_structs/main.go /START IMPORT OMIT/,/END IMPORT OMIT/

* Structs and Annotations - Type and struct tags

.code 02_structs/main.go /START TYPE OMIT/,/END TYPE OMIT/

* Structs and Annotations - creating a todo

.play 02_structs/main.go /START MAIN OMIT/,/END MAIN OMIT/

* Creating a session - Part 6

To run this:

	go run main.go

You should get something like this returned:

	(main.Todo) {
	Task: (string) (len=8) "Demo mgo",
		Created: (time.Time) 2015-01-10 11:06:39.876506859 -0700 MST,
		Updated: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
		Completed: (time.Time) 0001-01-01 00:00:00 +0000 UTC
	}

